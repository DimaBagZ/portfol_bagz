import { NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
  try {
    const { action, data } = await request.json();

    const botToken = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN;
    const chatId = process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID;

    if (!botToken || !chatId) {
      return NextResponse.json(
        { error: "Telegram —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã" },
        { status: 500 }
      );
    }

    if (action === "check") {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const url = `https://api.telegram.org/bot${botToken}/getMe`;

      try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
          console.log("–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API");
          controller.abort();
        }, 15000); // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

        console.log("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API:", url);
        const response = await fetch(url, {
          signal: controller.signal,
        });

        clearTimeout(timeoutId);
        console.log("–û—Ç–≤–µ—Ç –æ—Ç Telegram API:", response.status, response.statusText);
        const result = await response.json();

        return NextResponse.json({
          success: response.ok,
          data: result,
        });
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API:", error);

        // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏
        try {
          console.log("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...");
          const altUrl = `https://api.telegram.org/bot${botToken}/getUpdates`;
          const altResponse = await fetch(altUrl, {
            signal: AbortSignal.timeout(10000),
          });

          if (altResponse.ok) {
            return NextResponse.json({
              success: true,
              data: { message: "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ" },
            });
          }
        } catch (altError) {
          console.error("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å:", altError);
        }

        return NextResponse.json({
          success: false,
          error: "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:",
          details: [
            "‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ–∞–π—Ä–≤–æ–ª–æ–º",
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å DNS",
            "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã",
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é",
          ].join("\n"),
        });
      }
    }

    if (action === "send") {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      const { name, email, subject, message } = data;

      const formattedMessage = `
üìß *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ*

üë§ *–ò–º—è:* ${name}
üìß *Email:* ${email}
üìù *–¢–µ–º–∞:* ${subject}

üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*
${message}

‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString("ru-RU")}
      `.trim();

      const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

      try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
          console.log("–¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram");
          controller.abort();
        }, 20000); // 20 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

        console.log("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", url);
        const response = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            chat_id: chatId,
            text: formattedMessage,
            parse_mode: "Markdown",
          }),
          signal: controller.signal,
        });

        clearTimeout(timeoutId);
        console.log(
          "–û—Ç–≤–µ—Ç –æ—Ç Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:",
          response.status,
          response.statusText
        );
        const result = await response.json();

        return NextResponse.json({
          success: response.ok,
          data: result,
        });
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error);
        return NextResponse.json({
          success: false,
          error:
            "–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.",
          details: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        });
      }
    }

    return NextResponse.json({ error: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ" }, { status: 400 });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ API Telegram:", error);
    return NextResponse.json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
  }
}
