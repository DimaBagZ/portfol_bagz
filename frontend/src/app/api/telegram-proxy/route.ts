import { NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
  try {
    const { action, data } = await request.json();

    const botToken = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN;
    const chatId = process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID;

    if (!botToken || !chatId) {
      return NextResponse.json(
        { error: "Telegram —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã" },
        { status: 500 }
      );
    }

    if (action === "send") {
      const { name, email, subject, message } = data;

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const formattedMessage = `
üìß *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ*

üë§ *–ò–º—è:* ${name}
üìß *Email:* ${email}
üìù *–¢–µ–º–∞:* ${subject}

üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*
${message}

‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString("ru-RU")}
      `.trim();

      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã
      const proxyUrls = [
        `https://api.telegram.org/bot${botToken}/sendMessage`,
        `https://api.telegram.org:443/bot${botToken}/sendMessage`,
        `https://149.154.167.220:443/bot${botToken}/sendMessage`, // IP –∞–¥—Ä–µ—Å Telegram
        `https://149.154.167.50:443/bot${botToken}/sendMessage`, // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π IP
      ];

      for (const url of proxyUrls) {
        try {
          console.log(`–ü—Ä–æ–±—É–µ–º URL: ${url}`);

          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 10000);

          const response = await fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "User-Agent":
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            },
            body: JSON.stringify({
              chat_id: chatId,
              text: formattedMessage,
              parse_mode: "Markdown",
            }),
            signal: controller.signal,
          });

          clearTimeout(timeoutId);

          if (response.ok) {
            const result = await response.json();
            console.log("–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑:", url);
            return NextResponse.json({
              success: true,
              data: result,
              proxy: url,
            });
          } else {
            console.log(`–û—à–∏–±–∫–∞ ${response.status} –¥–ª—è URL: ${url}`);
          }
        } catch (error) {
          console.log(`–û—à–∏–±–∫–∞ –¥–ª—è URL ${url}:`, error);
          continue;
        }
      }

      return NextResponse.json({
        success: false,
        error: "–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—Å–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
        details: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN –∏–ª–∏ –¥—Ä—É–≥—É—é —Å–µ—Ç—å.",
      });
    }

    return NextResponse.json({ error: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ" }, { status: 400 });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ API Telegram Proxy:", error);
    return NextResponse.json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
  }
}
