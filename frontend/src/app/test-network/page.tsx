"use client";

import { useState } from "react";
import { Button } from "@/components/ui";

export default function TestNetworkPage() {
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState<string[]>([]);

  const addResult = (result: string) => {
    setResults((prev) => [...prev, `${new Date().toLocaleTimeString()}: ${result}`]);
  };

  const testBasicConnection = async () => {
    setIsLoading(true);
    addResult("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É...");

    try {
      const response = await fetch("https://httpbin.org/get", {
        signal: AbortSignal.timeout(10000),
      });

      if (response.ok) {
        addResult("‚úÖ –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç");
      } else {
        addResult(`‚ùå –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${response.status}`);
      }
    } catch (error) {
      addResult(`‚ùå –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  const testTelegramAPI = async () => {
    setIsLoading(true);
    addResult("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...");

    try {
      const response = await fetch(
        "https://api.telegram.org/bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11/getMe",
        {
          signal: AbortSignal.timeout(15000),
        }
      );

      if (response.ok) {
        addResult("‚úÖ Telegram API –¥–æ—Å—Ç—É–ø–µ–Ω");
      } else {
        addResult(`‚ùå Telegram API: ${response.status} ${response.statusText}`);
      }
    } catch (error) {
      addResult(`‚ùå Telegram API: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  const testDNS = async () => {
    setIsLoading(true);
    addResult("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ...");

    try {
      const response = await fetch("https://api.telegram.org", {
        method: "HEAD",
        signal: AbortSignal.timeout(10000),
      });

      if (response.status === 404 || response.status === 405) {
        addResult("‚úÖ DNS —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)");
      } else {
        addResult(`‚úÖ DNS —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
      }
    } catch (error) {
      addResult(`‚ùå DNS: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  const clearResults = () => {
    setResults([]);
  };

  return (
    <div className="min-h-screen bg-background p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-primary mb-8">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏</h1>

        <div className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Button onClick={testBasicConnection} disabled={isLoading} variant="outline">
              {isLoading ? "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..." : "–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"}
            </Button>

            <Button onClick={testTelegramAPI} disabled={isLoading} variant="outline">
              {isLoading ? "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..." : "–¢–µ—Å—Ç Telegram API"}
            </Button>

            <Button onClick={testDNS} disabled={isLoading} variant="outline">
              {isLoading ? "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..." : "–¢–µ—Å—Ç DNS"}
            </Button>

            <Button onClick={clearResults} disabled={isLoading} variant="secondary">
              –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            </Button>
          </div>

          {results.length > 0 && (
            <div className="p-4 bg-card rounded-lg border border-theme">
              <h3 className="font-semibold mb-3">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
              <div className="space-y-1 max-h-96 overflow-y-auto">
                {results.map((result, index) => (
                  <div key={index} className="text-sm font-mono">
                    {result}
                  </div>
                ))}
              </div>
            </div>
          )}

          <div className="p-4 bg-info/10 rounded-lg border border-info/20">
            <h3 className="font-semibold text-info mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
            <ul className="text-sm text-muted space-y-1">
              <li>
                ‚Ä¢ <strong>–ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</strong> - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
              </li>
              <li>
                ‚Ä¢ <strong>Telegram API</strong> - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ api.telegram.org
              </li>
              <li>
                ‚Ä¢ <strong>DNS</strong> - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ–º–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}
